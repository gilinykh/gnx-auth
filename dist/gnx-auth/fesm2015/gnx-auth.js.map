{"version":3,"file":"gnx-auth.js.map","sources":["ng://gnx-auth/lib/gnx-auth.service.ts","ng://gnx-auth/lib/guards/allow-non-logged-user.guard.ts","ng://gnx-auth/lib/guards/require-logged-user.guard.ts","ng://gnx-auth/lib/components/gnx-auth.component.ts","ng://gnx-auth/lib/interceptors/gnx-apply-token-interceptor.ts","ng://gnx-auth/lib/interceptors/gnx-refresh-token-interceptor.ts","ng://gnx-auth/lib/gnx-auth.module.ts"],"sourcesContent":["import {Inject, Injectable} from '@angular/core';\r\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\r\nimport {Observable, of, ReplaySubject, Subject} from 'rxjs';\r\nimport {catchError, map, switchMap, tap} from 'rxjs/operators';\r\nimport {Token, TokenData, Translateable} from './gnx-models';\r\nimport {CookieService} from \"ngx-cookie-service\";\r\nimport {JwtHelperService} from '@auth0/angular-jwt';\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GnxAuthService {\r\n  readonly AUTH_SERVER_TOKEN_ENDPOINT = '/oauth/token';\r\n  readonly AUTH_SERVER_LOGIN_ENDPOINT = '/oauth/authorize';\r\n  readonly AUTH_SERVER_SIGN_UP_ENDPOINT = '/registration';\r\n  readonly AUTH_SERVER_LANGUAGE_ENDPOINT = '/api/accounts/current/locale';\r\n  readonly ACCESS_TOKEN_COOKIE_NAME = 'access_token';\r\n  readonly REFRESH_TOKEN_COOKIE_NAME = 'refresh_token';\r\n  readonly COOKIE_PATH = '/';\r\n\r\n  private initialized = false;\r\n\r\n  clientId: string;\r\n  authServerUrl: string;\r\n  cookieDomainName: string;\r\n\r\n  private jwtHelper = new JwtHelperService();\r\n\r\n  private accessToken$: Subject<Token> = new ReplaySubject<Token>(1);\r\n  private accessToken: Token;\r\n  private refreshToken: Token;\r\n\r\n  private translatorService: Translateable;\r\n\r\n  private userLanguage: string;\r\n\r\n  constructor(private http: HttpClient,\r\n              private cookieService: CookieService,\r\n              private router: Router,\r\n              private route: ActivatedRoute,\r\n              @Inject('env') private env) {\r\n\r\n    this.clientId = env.clientId;\r\n    this.authServerUrl = env.authServerUrl;\r\n    this.cookieDomainName = env.cookieDomainName;\r\n  }\r\n\r\n  setTranslatorService(translatorService: Translateable) {\r\n    this.translatorService = translatorService;\r\n  }\r\n\r\n  init() {\r\n    // intercept request with 'code' param to get token by the code\r\n    let matchings = window.location.search.match(/code=(.+?)(&.+)?$/);\r\n    let code = matchings ? matchings[1] : null;\r\n    if (code) {\r\n      this.getTokensByCode(code);\r\n    } else {\r\n      this.tryToGetTokensFromCookieOrStorage().subscribe();\r\n    }\r\n    this.initialized = true;\r\n  }\r\n\r\n  getToken(): Observable<Token> {\r\n    if (!this.initialized) {\r\n      this.init();\r\n    }\r\n    return this.accessToken$.asObservable();\r\n  }\r\n\r\n  getTokensByCode(code: string) {\r\n    const params = new URLSearchParams();\r\n    params.append('grant_type', 'authorization_code');\r\n    params.append('client_id', this.clientId);\r\n    params.append('redirect_uri', this.getRedirectUri());\r\n    params.append('code', code);\r\n\r\n    const headers = new HttpHeaders({\r\n      'Content-type': 'application/x-www-form-urlencoded; charset=utf-8',\r\n      'Authorization': 'Basic ' + btoa(this.clientId + ':secret')\r\n    });\r\n\r\n    this.http.post<TokenData>(this.authServerUrl + this.AUTH_SERVER_TOKEN_ENDPOINT, params.toString(),\r\n      {headers: headers}).subscribe(tokenData => {\r\n        this.saveTokens(tokenData);\r\n        this.accessToken$.next(this.accessToken);\r\n        this.removeCodeParamAndNavigateToTheSamePage().then();\r\n      },\r\n      err => this.accessToken$.next(null));\r\n  }\r\n\r\n  getAccessTokenByRefreshToken(): Observable<Token> {\r\n    return this.tryToGetTokensFromCookieOrStorage().pipe(\r\n      switchMap(val => this.getToken())\r\n    );\r\n  }\r\n\r\n  redirectToLoginPage() {\r\n    window.location.href = `${this.authServerUrl}${this.AUTH_SERVER_LOGIN_ENDPOINT}` +\r\n      `?response_type=code&client_id=${this.clientId}&redirect_uri=${this.getRedirectUri()}`;\r\n  }\r\n\r\n  redirectToSignUpPage() {\r\n    window.location.href = `${this.authServerUrl}${this.AUTH_SERVER_SIGN_UP_ENDPOINT}`;\r\n  }\r\n\r\n  logout() {\r\n    this.deleteTokens();\r\n    this.accessToken$.next(null);\r\n    this.navigateToTheSamePage().then();\r\n  }\r\n\r\n  retrieveUserLanguageFromServer() {\r\n    this.http.get<{ locale: string }>(this.authServerUrl + this.AUTH_SERVER_LANGUAGE_ENDPOINT)\r\n      .subscribe(res => {\r\n        if (res && res.locale !== this.translatorService.getCurrentLang().toLowerCase()) {\r\n          this.userLanguage = res.locale;\r\n          this.translatorService.useLanguage(this.userLanguage);\r\n        }\r\n      });\r\n  }\r\n\r\n  setDefaultUserLanguage() {\r\n    this.userLanguage = this.translatorService.getCurrentLang();\r\n  }\r\n\r\n  private tryToGetTokensFromCookieOrStorage(): Observable<boolean> {\r\n    if (this.isValidToken(this.accessToken)) {\r\n      this.accessToken$.next(this.accessToken);\r\n      return of(true);\r\n    }\r\n\r\n    // look for access_token in cookie\r\n    let encodedToken = this.cookieService.get(this.ACCESS_TOKEN_COOKIE_NAME);\r\n    let decodedToken = this.decodeToken(encodedToken);\r\n    if (this.isValidToken(decodedToken)) {\r\n      this.accessToken = decodedToken;\r\n      this.accessToken$.next(decodedToken);\r\n      return of(true);\r\n    } else {\r\n      this.removeAccessTokenFromCookie();\r\n    }\r\n\r\n    // look for a refresh token in cookie\r\n    let refreshToken: Token;\r\n    if (this.refreshToken) {\r\n      refreshToken = this.refreshToken;\r\n    } else {\r\n      refreshToken = this.decodeToken(this.cookieService.get(this.REFRESH_TOKEN_COOKIE_NAME));\r\n    }\r\n    if (this.isValidToken(refreshToken)) {\r\n      return this.getNewTokensByRefreshToken(refreshToken).pipe(\r\n        tap(tokenData => {\r\n          this.saveTokens(tokenData);\r\n          this.accessToken$.next(this.accessToken);\r\n        }),\r\n        map(tokenData => !!tokenData),\r\n        catchError(err => {\r\n          this.removeRefreshTokenFromCookie();\r\n          this.accessToken$.next(null);\r\n          return of(false);\r\n        })\r\n      );\r\n    } else {\r\n      this.removeRefreshTokenFromCookie();\r\n    }\r\n\r\n    this.accessToken$.next(null);\r\n    return of(false);\r\n  }\r\n\r\n  private removeCodeParamAndNavigateToTheSamePage(): Promise<boolean> {\r\n    let queryParams: any = {};\r\n    let params = this.route.snapshot.queryParamMap;\r\n    params.keys.forEach(k => {\r\n      if (k !== 'code') {\r\n        queryParams[k] = params.get(k);\r\n      }\r\n    });\r\n\r\n    let currentUrlPath = this.getCurrentUrlPath();\r\n    return this.router.navigate(\r\n      [currentUrlPath],\r\n      {\r\n        relativeTo: this.route,\r\n        queryParams: queryParams,\r\n      });\r\n  }\r\n\r\n  private navigateToTheSamePage(): Promise<boolean> {\r\n    let queryParams: any = {};\r\n    let params = this.route.snapshot.queryParamMap;\r\n    params.keys.forEach(k => {\r\n        queryParams[k] = params.get(k);\r\n    });\r\n\r\n    let currentUrlPath = this.getCurrentUrlPath();\r\n    return this.router.navigate(\r\n      [currentUrlPath],\r\n      {\r\n        relativeTo: this.route,\r\n        queryParams: queryParams,\r\n      });\r\n  }\r\n\r\n  private saveTokens(tokenData: TokenData) {\r\n    if (tokenData) {\r\n      let decodedAccessToken = this.decodeToken(tokenData.access_token);\r\n      let acExpireDate = new Date(decodedAccessToken.exp * 1000);\r\n      this.cookieService.set(this.ACCESS_TOKEN_COOKIE_NAME, tokenData.access_token, acExpireDate, this.COOKIE_PATH, this.cookieDomainName);\r\n      this.accessToken = decodedAccessToken;\r\n\r\n      let decodedRefreshToken = this.decodeToken(tokenData.refresh_token);\r\n      let rtExpireDate = new Date(decodedRefreshToken.exp * 1000);\r\n      this.cookieService.set(this.REFRESH_TOKEN_COOKIE_NAME, tokenData.refresh_token, rtExpireDate, this.COOKIE_PATH, this.cookieDomainName);\r\n      this.refreshToken = this.decodeToken(tokenData.refresh_token);\r\n    }\r\n  }\r\n\r\n  private getCurrentUrlPath() {\r\n    let url = this.router.url;\r\n    if (url.indexOf('?') > 0) {\r\n      url = url.substr(0, url.indexOf('?'))\r\n    }\r\n    return url;\r\n  }\r\n\r\n  private getNewTokensByRefreshToken(refreshToken: Token): Observable<TokenData> {\r\n    const headers = new HttpHeaders({\r\n      'Content-type': 'application/x-www-form-urlencoded; charset=utf-8',\r\n      'Authorization': 'Basic ' + btoa(this.clientId + ':secret')\r\n    });\r\n\r\n    let body = new URLSearchParams();\r\n    body.set('grant_type', 'refresh_token');\r\n    body.set('refresh_token', refreshToken.encodedToken);\r\n\r\n    return this.http.post<TokenData>(this.authServerUrl + this.AUTH_SERVER_TOKEN_ENDPOINT, body.toString(), {headers: headers});\r\n  }\r\n\r\n  private isValidToken(token: Token): boolean {\r\n    if (!token) {\r\n      return false;\r\n    }\r\n    let expirationSeconds = token.exp;\r\n    return expirationSeconds && (new Date().getTime() < expirationSeconds * 1000);\r\n  }\r\n\r\n  private deleteTokens() {\r\n    this.removeAccessTokenFromCookie();\r\n    this.accessToken = null;\r\n    this.removeRefreshTokenFromCookie();\r\n    this.refreshToken = null;\r\n  }\r\n\r\n  private removeAccessTokenFromCookie() {\r\n    let cookieValue = this.cookieService.get(this.ACCESS_TOKEN_COOKIE_NAME);\r\n    if (cookieValue) {\r\n      let expireDate = new Date(0);\r\n      this.cookieService.set(this.ACCESS_TOKEN_COOKIE_NAME, cookieValue, expireDate, this.COOKIE_PATH, this.cookieDomainName);\r\n    }\r\n  }\r\n\r\n  private removeRefreshTokenFromCookie() {\r\n    let cookieValue = this.cookieService.get(this.REFRESH_TOKEN_COOKIE_NAME);\r\n    if (cookieValue) {\r\n      let expireDate = new Date(0);\r\n      this.cookieService.set(this.REFRESH_TOKEN_COOKIE_NAME, cookieValue, expireDate, this.COOKIE_PATH, this.cookieDomainName);\r\n    }\r\n  }\r\n\r\n  private decodeToken(encodedToken: string): Token {\r\n    if (!encodedToken) {\r\n      return null;\r\n    }\r\n\r\n    let decodedToken = this.jwtHelper.decodeToken(encodedToken) as Token;\r\n    if (decodedToken) {\r\n      decodedToken.encodedToken = encodedToken;\r\n    }\r\n\r\n    return decodedToken;\r\n  }\r\n\r\n  private getRedirectUri(): string {\r\n    return window.location.href.replace(/^(http[s]?:\\/\\/[a-zA-Z\\\\.:0-9]+)(\\/.*)$/, '$1');\r\n  }\r\n\r\n}\r\n","import {Injectable} from \"@angular/core\";\r\nimport {CanActivate, Router} from \"@angular/router\";\r\nimport {GnxAuthService} from \"../gnx-auth.service\";\r\nimport {Observable, of} from \"rxjs\";\r\nimport {map, switchMap} from \"rxjs/operators\";\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AllowNonLoggedUserGuard implements CanActivate {\r\n  constructor(public auth: GnxAuthService, public router: Router) {}\r\n  canActivate(): Observable<boolean> {\r\n    return of(null).pipe(\r\n      switchMap(() => this.auth.getToken()),\r\n      map(token => {\r\n        return true;\r\n      }) // always returns true, needed to try to get token from cookie\r\n    );\r\n  }\r\n}\r\n","import {Injectable} from \"@angular/core\";\r\nimport {CanActivate, Router} from \"@angular/router\";\r\nimport {GnxAuthService} from \"../gnx-auth.service\";\r\nimport {Observable} from \"rxjs\";\r\nimport {map} from \"rxjs/operators\";\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class RequireLoggedUserGuard implements CanActivate {\r\n  constructor(public auth: GnxAuthService, public router: Router) {}\r\n  canActivate(): Observable<boolean> {\r\n    return this.auth.getToken().pipe(\r\n      map(token => {\r\n        if (!token) {\r\n          this.auth.redirectToLoginPage();\r\n          return false;\r\n        }\r\n        return true;\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import {Component, Inject, Input, OnInit} from '@angular/core';\r\nimport {GnxAuthService} from \"../gnx-auth.service\";\r\nimport {Translateable} from \"../gnx-models\";\r\n\r\n@Component({\r\n  selector: 'gnx-auth',\r\n  templateUrl: './gnx-auth.component.html',\r\n  styleUrls: ['./gnx-auth.component.scss']\r\n})\r\nexport class GnxAuthComponent implements OnInit {\r\n\r\n  @Input() redirectToLoginPageIfUserNotLoggedIn = true;\r\n\r\n  isLoggedIn: boolean;\r\n  userName: string;\r\n  initialized = false;\r\n\r\n  constructor(private service: GnxAuthService,\r\n              @Inject('TranslatorService') public translatorService: Translateable,\r\n              @Inject('env') public env) {\r\n    service.setTranslatorService(translatorService);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.service.getToken().subscribe(token => {\r\n      if (token) {\r\n        this.userName = token.user_name;\r\n        this.isLoggedIn = true;\r\n        this.service.retrieveUserLanguageFromServer();\r\n      } else {\r\n        this.userName = null;\r\n        this.isLoggedIn = false;\r\n        this.service.setDefaultUserLanguage();\r\n      }\r\n      this.initialized = true;\r\n    });\r\n  }\r\n\r\n  login() {\r\n    this.service.redirectToLoginPage();\r\n  }\r\n\r\n  signUp() {\r\n    this.service.redirectToSignUpPage();\r\n  }\r\n\r\n  logout() {\r\n    this.service.logout();\r\n    this.isLoggedIn = false;\r\n  }\r\n\r\n  translate(text: string): string {\r\n    return this.translatorService.translate.instant(text);\r\n  }\r\n\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\r\n\r\nimport {Observable} from 'rxjs';\r\nimport {GnxAuthService} from \"../gnx-auth.service\";\r\nimport {first, map, switchMap} from \"rxjs/operators\";\r\n\r\n@Injectable()\r\nexport class GnxApplyTokenInterceptor implements HttpInterceptor {\r\n\r\n  constructor(private gnxAuthService: GnxAuthService) {\r\n  }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    if (req.url.indexOf('/api/') > -1) {\r\n      return this.gnxAuthService.getToken().pipe(\r\n        first(),\r\n        map(token => {\r\n            if (token) {\r\n              return req.clone({\r\n                setHeaders: {\r\n                  Authorization: 'Bearer ' + token.encodedToken\r\n                }\r\n              })\r\n            }\r\n            return req;\r\n          }\r\n        ),\r\n        switchMap(request => next.handle(request)),\r\n      );\r\n    }\r\n    return next.handle(req);\r\n  }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\r\n\r\nimport {Observable, throwError} from 'rxjs';\r\nimport {catchError, first, switchMap} from \"rxjs/operators\";\r\nimport {GnxAuthService} from \"../gnx-auth.service\";\r\n\r\n@Injectable()\r\nexport class GnxRefreshTokenInterceptor implements HttpInterceptor {\r\n\r\n  private notTriedYet = true;\r\n\r\n    constructor(private gnxAuthService: GnxAuthService) {\r\n    }\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n      if (req.url.startsWith('/api/')) {\r\n        return next.handle(req).pipe(\r\n          catchError(err => {\r\n            if (err instanceof HttpErrorResponse && err.status === 401) { // it seems access token hs expired, try to get new tokens by refresh token\r\n              if (this.notTriedYet) {\r\n                this.notTriedYet = false;\r\n                return this.gnxAuthService.getAccessTokenByRefreshToken().pipe(\r\n                  first(),\r\n                  switchMap(token => {\r\n                    this.notTriedYet = true;\r\n                    if (token) {\r\n                      let newRequest = req.clone({\r\n                        setHeaders: {\r\n                          Authorization: 'Bearer ' + token.encodedToken\r\n                        }\r\n                      });\r\n                      return next.handle(newRequest);\r\n                    }\r\n                    this.gnxAuthService.redirectToLoginPage();\r\n                  })\r\n                );\r\n              } else {\r\n                this.notTriedYet = true;\r\n                this.gnxAuthService.redirectToLoginPage();\r\n              }\r\n            } else {\r\n              return throwError(err);\r\n            }\r\n          })\r\n        );\r\n      }\r\n\r\n      return next.handle(req);\r\n    }\r\n}\r\n","import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {BrowserModule} from '@angular/platform-browser';\r\n// LibComponent\r\nimport {GnxAuthComponent} from './components/gnx-auth.component';\r\nimport {CookieService} from \"ngx-cookie-service\";\r\nimport {HTTP_INTERCEPTORS} from \"@angular/common/http\";\r\nimport {GnxApplyTokenInterceptor} from \"./interceptors/gnx-apply-token-interceptor\";\r\nimport {GnxRefreshTokenInterceptor} from \"./interceptors/gnx-refresh-token-interceptor\";\r\nimport {GnxAuthService} from \"./gnx-auth.service\";\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    GnxAuthComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n  ],\r\n  exports: [\r\n    GnxAuthComponent\r\n  ],\r\n  providers: [\r\n    CookieService,\r\n    {provide: HTTP_INTERCEPTORS, useClass: GnxApplyTokenInterceptor, multi: true},\r\n    {provide: HTTP_INTERCEPTORS, useClass: GnxRefreshTokenInterceptor, multi: true},\r\n  ]\r\n})\r\nexport class GnxAuthModule {\r\n\r\n  public static forRoot(environment: any, translatorService: any): ModuleWithProviders {\r\n\r\n    return {\r\n      ngModule: GnxAuthModule,\r\n      providers: [\r\n        GnxAuthService,\r\n        {provide: 'TranslatorService', useClass: translatorService},\r\n        {\r\n          provide: 'env',\r\n          useValue: environment\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}
