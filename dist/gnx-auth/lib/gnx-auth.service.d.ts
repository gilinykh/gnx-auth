import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Token, Translateable } from './gnx-models';
import { CookieService } from "ngx-cookie-service";
import { ActivatedRoute, Router } from "@angular/router";
export declare class GnxAuthService {
    private http;
    private cookieService;
    private router;
    private route;
    private env;
    readonly AUTH_SERVER_TOKEN_ENDPOINT = "/oauth/token";
    readonly AUTH_SERVER_LOGIN_ENDPOINT = "/oauth/authorize";
    readonly AUTH_SERVER_SIGN_UP_ENDPOINT = "/registration";
    readonly AUTH_SERVER_LANGUAGE_ENDPOINT = "/api/accounts/current/locale";
    readonly ACCESS_TOKEN_COOKIE_NAME = "access_token";
    readonly REFRESH_TOKEN_COOKIE_NAME = "refresh_token";
    readonly COOKIE_PATH = "/";
    private initialized;
    clientId: string;
    authServerUrl: string;
    cookieDomainName: string;
    private jwtHelper;
    private accessToken$;
    private accessToken;
    private refreshToken;
    private translatorService;
    private userLanguage;
    constructor(http: HttpClient, cookieService: CookieService, router: Router, route: ActivatedRoute, env: any);
    setTranslatorService(translatorService: Translateable): void;
    init(): void;
    getToken(): Observable<Token>;
    getTokensByCode(code: string): void;
    getAccessTokenByRefreshToken(): Observable<Token>;
    redirectToLoginPage(): void;
    redirectToSignUpPage(): void;
    logout(): void;
    retrieveUserLanguageFromServer(): void;
    setDefaultUserLanguage(): void;
    private tryToGetTokensFromCookieOrStorage;
    private removeCodeParamAndNavigateToTheSamePage;
    private navigateToTheSamePage;
    private saveTokens;
    private getCurrentUrlPath;
    private getNewTokensByRefreshToken;
    private isValidToken;
    private deleteTokens;
    private removeAccessTokenFromCookie;
    private removeRefreshTokenFromCookie;
    private decodeToken;
    private getRedirectUri;
}
