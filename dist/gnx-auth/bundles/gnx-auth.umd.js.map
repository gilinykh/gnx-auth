{"version":3,"file":"gnx-auth.umd.js.map","sources":["ng://@gnx/auth/lib/gnx-auth.service.ts","ng://@gnx/auth/lib/guards/allow-non-logged-user.guard.ts","ng://@gnx/auth/lib/guards/require-logged-user.guard.ts","ng://@gnx/auth/lib/components/gnx-auth.component.ts","ng://@gnx/auth/lib/interceptors/gnx-apply-token-interceptor.ts","ng://@gnx/auth/lib/interceptors/gnx-refresh-token-interceptor.ts","ng://@gnx/auth/lib/gnx-auth.module.ts"],"sourcesContent":["import {Inject, Injectable} from '@angular/core';\r\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\r\nimport {Observable, of, ReplaySubject, Subject} from 'rxjs';\r\nimport {catchError, map, switchMap, tap} from 'rxjs/operators';\r\nimport {Token, TokenData, Translateable} from './gnx-models';\r\nimport {CookieService} from \"ngx-cookie-service\";\r\nimport {JwtHelperService} from '@auth0/angular-jwt';\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GnxAuthService {\r\n  readonly AUTH_SERVER_TOKEN_ENDPOINT = '/oauth/token';\r\n  readonly AUTH_SERVER_LOGIN_ENDPOINT = '/oauth/authorize';\r\n  readonly AUTH_SERVER_SIGN_UP_ENDPOINT = '/registration';\r\n  readonly AUTH_SERVER_LANGUAGE_ENDPOINT = '/api/accounts/current/locale';\r\n  readonly ACCESS_TOKEN_COOKIE_NAME = 'access_token';\r\n  readonly REFRESH_TOKEN_COOKIE_NAME = 'refresh_token';\r\n  readonly COOKIE_PATH = '/';\r\n\r\n  private initialized = false;\r\n\r\n  clientId: string;\r\n  authServerUrl: string;\r\n  cookieDomainName: string;\r\n\r\n  private jwtHelper = new JwtHelperService();\r\n\r\n  private accessToken$: Subject<Token> = new ReplaySubject<Token>(1);\r\n  private accessToken: Token;\r\n  private refreshToken: Token;\r\n\r\n  private translatorService: Translateable;\r\n\r\n  private userLanguage: string;\r\n\r\n  constructor(private http: HttpClient,\r\n              private cookieService: CookieService,\r\n              private router: Router,\r\n              private route: ActivatedRoute,\r\n              @Inject('env') private env) {\r\n\r\n    this.clientId = env.clientId;\r\n    this.authServerUrl = env.authServerUrl;\r\n    this.cookieDomainName = env.cookieDomainName;\r\n  }\r\n\r\n  setTranslatorService(translatorService: Translateable) {\r\n    this.translatorService = translatorService;\r\n  }\r\n\r\n  init() {\r\n    // intercept request with 'code' param to get token by the code\r\n    let matchings = window.location.search.match(/code=(.+?)(&.+)?$/);\r\n    let code = matchings ? matchings[1] : null;\r\n    if (code) {\r\n      this.getTokensByCode(code);\r\n    } else {\r\n      this.tryToGetTokensFromCookieOrStorage().subscribe();\r\n    }\r\n    this.initialized = true;\r\n  }\r\n\r\n  getToken(): Observable<Token> {\r\n    if (!this.initialized) {\r\n      this.init();\r\n    }\r\n    return this.accessToken$.asObservable();\r\n  }\r\n\r\n  getTokensByCode(code: string) {\r\n    const params = new URLSearchParams();\r\n    params.append('grant_type', 'authorization_code');\r\n    params.append('client_id', this.clientId);\r\n    params.append('redirect_uri', this.getRedirectUri());\r\n    params.append('code', code);\r\n\r\n    const headers = new HttpHeaders({\r\n      'Content-type': 'application/x-www-form-urlencoded; charset=utf-8',\r\n      'Authorization': 'Basic ' + btoa(this.clientId + ':secret')\r\n    });\r\n\r\n    this.http.post<TokenData>(this.authServerUrl + this.AUTH_SERVER_TOKEN_ENDPOINT, params.toString(),\r\n      {headers: headers}).subscribe(tokenData => {\r\n        this.saveTokens(tokenData);\r\n        this.accessToken$.next(this.accessToken);\r\n        this.removeCodeParamAndNavigateToTheSamePage().then();\r\n      },\r\n      err => this.accessToken$.next(null));\r\n  }\r\n\r\n  getAccessTokenByRefreshToken(): Observable<Token> {\r\n    return this.tryToGetTokensFromCookieOrStorage().pipe(\r\n      switchMap(val => this.getToken())\r\n    );\r\n  }\r\n\r\n  redirectToLoginPage() {\r\n    window.location.href = `${this.authServerUrl}${this.AUTH_SERVER_LOGIN_ENDPOINT}` +\r\n      `?response_type=code&client_id=${this.clientId}&redirect_uri=${this.getRedirectUri()}`;\r\n  }\r\n\r\n  redirectToSignUpPage() {\r\n    window.location.href = `${this.authServerUrl}${this.AUTH_SERVER_SIGN_UP_ENDPOINT}`;\r\n  }\r\n\r\n  logout() {\r\n    this.deleteTokens();\r\n    this.accessToken$.next(null);\r\n    this.navigateToTheSamePage().then();\r\n  }\r\n\r\n  retrieveUserLanguageFromServer() {\r\n    this.http.get<{ locale: string }>(this.authServerUrl + this.AUTH_SERVER_LANGUAGE_ENDPOINT)\r\n      .subscribe(res => {\r\n        if (res && res.locale !== this.translatorService.getCurrentLang().toLowerCase()) {\r\n          this.userLanguage = res.locale;\r\n          this.translatorService.useLanguage(this.userLanguage);\r\n        }\r\n      });\r\n  }\r\n\r\n  setDefaultUserLanguage() {\r\n    this.userLanguage = this.translatorService.getCurrentLang();\r\n  }\r\n\r\n  private tryToGetTokensFromCookieOrStorage(): Observable<boolean> {\r\n    if (this.isValidToken(this.accessToken)) {\r\n      this.accessToken$.next(this.accessToken);\r\n      return of(true);\r\n    }\r\n\r\n    // look for access_token in cookie\r\n    let encodedToken = this.cookieService.get(this.ACCESS_TOKEN_COOKIE_NAME);\r\n    let decodedToken = this.decodeToken(encodedToken);\r\n    if (this.isValidToken(decodedToken)) {\r\n      this.accessToken = decodedToken;\r\n      this.accessToken$.next(decodedToken);\r\n      return of(true);\r\n    } else {\r\n      this.removeAccessTokenFromCookie();\r\n    }\r\n\r\n    // look for a refresh token in cookie\r\n    let refreshToken: Token;\r\n    if (this.refreshToken) {\r\n      refreshToken = this.refreshToken;\r\n    } else {\r\n      refreshToken = this.decodeToken(this.cookieService.get(this.REFRESH_TOKEN_COOKIE_NAME));\r\n    }\r\n    if (this.isValidToken(refreshToken)) {\r\n      return this.getNewTokensByRefreshToken(refreshToken).pipe(\r\n        tap(tokenData => {\r\n          this.saveTokens(tokenData);\r\n          this.accessToken$.next(this.accessToken);\r\n        }),\r\n        map(tokenData => !!tokenData),\r\n        catchError(err => {\r\n          this.removeRefreshTokenFromCookie();\r\n          this.accessToken$.next(null);\r\n          return of(false);\r\n        })\r\n      );\r\n    } else {\r\n      this.removeRefreshTokenFromCookie();\r\n    }\r\n\r\n    this.accessToken$.next(null);\r\n    return of(false);\r\n  }\r\n\r\n  private removeCodeParamAndNavigateToTheSamePage(): Promise<boolean> {\r\n    let queryParams: any = {};\r\n    let params = this.route.snapshot.queryParamMap;\r\n    params.keys.forEach(k => {\r\n      if (k !== 'code') {\r\n        queryParams[k] = params.get(k);\r\n      }\r\n    });\r\n\r\n    let currentUrlPath = this.getCurrentUrlPath();\r\n    return this.router.navigate(\r\n      [currentUrlPath],\r\n      {\r\n        relativeTo: this.route,\r\n        queryParams: queryParams,\r\n      });\r\n  }\r\n\r\n  private navigateToTheSamePage(): Promise<boolean> {\r\n    let queryParams: any = {};\r\n    let params = this.route.snapshot.queryParamMap;\r\n    params.keys.forEach(k => {\r\n        queryParams[k] = params.get(k);\r\n    });\r\n\r\n    let currentUrlPath = this.getCurrentUrlPath();\r\n    return this.router.navigate(\r\n      [currentUrlPath],\r\n      {\r\n        relativeTo: this.route,\r\n        queryParams: queryParams,\r\n      });\r\n  }\r\n\r\n  private saveTokens(tokenData: TokenData) {\r\n    if (tokenData) {\r\n      let decodedAccessToken = this.decodeToken(tokenData.access_token);\r\n      let acExpireDate = new Date(decodedAccessToken.exp * 1000);\r\n      this.cookieService.set(this.ACCESS_TOKEN_COOKIE_NAME, tokenData.access_token, acExpireDate, this.COOKIE_PATH, this.cookieDomainName);\r\n      this.accessToken = decodedAccessToken;\r\n\r\n      let decodedRefreshToken = this.decodeToken(tokenData.refresh_token);\r\n      let rtExpireDate = new Date(decodedRefreshToken.exp * 1000);\r\n      this.cookieService.set(this.REFRESH_TOKEN_COOKIE_NAME, tokenData.refresh_token, rtExpireDate, this.COOKIE_PATH, this.cookieDomainName);\r\n      this.refreshToken = this.decodeToken(tokenData.refresh_token);\r\n    }\r\n  }\r\n\r\n  private getCurrentUrlPath() {\r\n    let url = this.router.url;\r\n    if (url.indexOf('?') > 0) {\r\n      url = url.substr(0, url.indexOf('?'))\r\n    }\r\n    return url;\r\n  }\r\n\r\n  private getNewTokensByRefreshToken(refreshToken: Token): Observable<TokenData> {\r\n    const headers = new HttpHeaders({\r\n      'Content-type': 'application/x-www-form-urlencoded; charset=utf-8',\r\n      'Authorization': 'Basic ' + btoa(this.clientId + ':secret')\r\n    });\r\n\r\n    let body = new URLSearchParams();\r\n    body.set('grant_type', 'refresh_token');\r\n    body.set('refresh_token', refreshToken.encodedToken);\r\n\r\n    return this.http.post<TokenData>(this.authServerUrl + this.AUTH_SERVER_TOKEN_ENDPOINT, body.toString(), {headers: headers});\r\n  }\r\n\r\n  private isValidToken(token: Token): boolean {\r\n    if (!token) {\r\n      return false;\r\n    }\r\n    let expirationSeconds = token.exp;\r\n    return expirationSeconds && (new Date().getTime() < expirationSeconds * 1000);\r\n  }\r\n\r\n  private deleteTokens() {\r\n    this.removeAccessTokenFromCookie();\r\n    this.accessToken = null;\r\n    this.removeRefreshTokenFromCookie();\r\n    this.refreshToken = null;\r\n  }\r\n\r\n  private removeAccessTokenFromCookie() {\r\n    let cookieValue = this.cookieService.get(this.ACCESS_TOKEN_COOKIE_NAME);\r\n    if (cookieValue) {\r\n      let expireDate = new Date(0);\r\n      this.cookieService.set(this.ACCESS_TOKEN_COOKIE_NAME, cookieValue, expireDate, this.COOKIE_PATH, this.cookieDomainName);\r\n    }\r\n  }\r\n\r\n  private removeRefreshTokenFromCookie() {\r\n    let cookieValue = this.cookieService.get(this.REFRESH_TOKEN_COOKIE_NAME);\r\n    if (cookieValue) {\r\n      let expireDate = new Date(0);\r\n      this.cookieService.set(this.REFRESH_TOKEN_COOKIE_NAME, cookieValue, expireDate, this.COOKIE_PATH, this.cookieDomainName);\r\n    }\r\n  }\r\n\r\n  private decodeToken(encodedToken: string): Token {\r\n    if (!encodedToken) {\r\n      return null;\r\n    }\r\n\r\n    let decodedToken = this.jwtHelper.decodeToken(encodedToken) as Token;\r\n    if (decodedToken) {\r\n      decodedToken.encodedToken = encodedToken;\r\n    }\r\n\r\n    return decodedToken;\r\n  }\r\n\r\n  private getRedirectUri(): string {\r\n    return window.location.href.replace(/^(http[s]?:\\/\\/[a-zA-Z\\\\.:0-9]+)(\\/.*)$/, '$1');\r\n  }\r\n\r\n}\r\n","import {Injectable} from \"@angular/core\";\r\nimport {CanActivate, Router} from \"@angular/router\";\r\nimport {GnxAuthService} from \"../gnx-auth.service\";\r\nimport {Observable, of} from \"rxjs\";\r\nimport {map, switchMap} from \"rxjs/operators\";\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AllowNonLoggedUserGuard implements CanActivate {\r\n  constructor(public auth: GnxAuthService, public router: Router) {}\r\n  canActivate(): Observable<boolean> {\r\n    return of(null).pipe(\r\n      switchMap(() => this.auth.getToken()),\r\n      map(token => {\r\n        return true;\r\n      }) // always returns true, needed to try to get token from cookie\r\n    );\r\n  }\r\n}\r\n","import {Injectable} from \"@angular/core\";\r\nimport {CanActivate, Router} from \"@angular/router\";\r\nimport {GnxAuthService} from \"../gnx-auth.service\";\r\nimport {Observable} from \"rxjs\";\r\nimport {map} from \"rxjs/operators\";\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class RequireLoggedUserGuard implements CanActivate {\r\n  constructor(public auth: GnxAuthService, public router: Router) {}\r\n  canActivate(): Observable<boolean> {\r\n    return this.auth.getToken().pipe(\r\n      map(token => {\r\n        if (!token) {\r\n          this.auth.redirectToLoginPage();\r\n          return false;\r\n        }\r\n        return true;\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import {Component, Inject, Input, OnInit} from '@angular/core';\r\nimport {GnxAuthService} from \"../gnx-auth.service\";\r\nimport {Translateable} from \"../gnx-models\";\r\n\r\n@Component({\r\n  selector: 'gnx-auth',\r\n  templateUrl: './gnx-auth.component.html',\r\n  styleUrls: ['./gnx-auth.component.scss']\r\n})\r\nexport class GnxAuthComponent implements OnInit {\r\n\r\n  @Input() redirectToLoginPageIfUserNotLoggedIn = true;\r\n\r\n  isLoggedIn: boolean;\r\n  userName: string;\r\n  initialized = false;\r\n\r\n  constructor(private service: GnxAuthService,\r\n              @Inject('TranslatorService') public translatorService: Translateable,\r\n              @Inject('env') public env) {\r\n    service.setTranslatorService(translatorService);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.service.getToken().subscribe(token => {\r\n      if (token) {\r\n        this.userName = token.user_name;\r\n        this.isLoggedIn = true;\r\n        this.service.retrieveUserLanguageFromServer();\r\n      } else {\r\n        this.userName = null;\r\n        this.isLoggedIn = false;\r\n        this.service.setDefaultUserLanguage();\r\n      }\r\n      this.initialized = true;\r\n    });\r\n  }\r\n\r\n  login() {\r\n    this.service.redirectToLoginPage();\r\n  }\r\n\r\n  signUp() {\r\n    this.service.redirectToSignUpPage();\r\n  }\r\n\r\n  logout() {\r\n    this.service.logout();\r\n    this.isLoggedIn = false;\r\n  }\r\n\r\n  translate(text: string): string {\r\n    return this.translatorService.translate.instant(text);\r\n  }\r\n\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\r\n\r\nimport {Observable} from 'rxjs';\r\nimport {GnxAuthService} from \"../gnx-auth.service\";\r\nimport {first, map, switchMap} from \"rxjs/operators\";\r\n\r\n@Injectable()\r\nexport class GnxApplyTokenInterceptor implements HttpInterceptor {\r\n\r\n  constructor(private gnxAuthService: GnxAuthService) {\r\n  }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    if (req.url.indexOf('/api/') > -1) {\r\n      return this.gnxAuthService.getToken().pipe(\r\n        first(),\r\n        map(token => {\r\n            if (token) {\r\n              return req.clone({\r\n                setHeaders: {\r\n                  Authorization: 'Bearer ' + token.encodedToken\r\n                }\r\n              })\r\n            }\r\n            return req;\r\n          }\r\n        ),\r\n        switchMap(request => next.handle(request)),\r\n      );\r\n    }\r\n    return next.handle(req);\r\n  }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\r\n\r\nimport {Observable, throwError} from 'rxjs';\r\nimport {catchError, first, switchMap} from \"rxjs/operators\";\r\nimport {GnxAuthService} from \"../gnx-auth.service\";\r\n\r\n@Injectable()\r\nexport class GnxRefreshTokenInterceptor implements HttpInterceptor {\r\n\r\n  private notTriedYet = true;\r\n\r\n    constructor(private gnxAuthService: GnxAuthService) {\r\n    }\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n      if (req.url.startsWith('/api/')) {\r\n        return next.handle(req).pipe(\r\n          catchError(err => {\r\n            if (err instanceof HttpErrorResponse && err.status === 401) { // it seems access token hs expired, try to get new tokens by refresh token\r\n              if (this.notTriedYet) {\r\n                this.notTriedYet = false;\r\n                return this.gnxAuthService.getAccessTokenByRefreshToken().pipe(\r\n                  first(),\r\n                  switchMap(token => {\r\n                    this.notTriedYet = true;\r\n                    if (token) {\r\n                      let newRequest = req.clone({\r\n                        setHeaders: {\r\n                          Authorization: 'Bearer ' + token.encodedToken\r\n                        }\r\n                      });\r\n                      return next.handle(newRequest);\r\n                    }\r\n                    this.gnxAuthService.redirectToLoginPage();\r\n                  })\r\n                );\r\n              } else {\r\n                this.notTriedYet = true;\r\n                this.gnxAuthService.redirectToLoginPage();\r\n              }\r\n            } else {\r\n              return throwError(err);\r\n            }\r\n          })\r\n        );\r\n      }\r\n\r\n      return next.handle(req);\r\n    }\r\n}\r\n","import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {BrowserModule} from '@angular/platform-browser';\r\n// LibComponent\r\nimport {GnxAuthComponent} from './components/gnx-auth.component';\r\nimport {CookieService} from \"ngx-cookie-service\";\r\nimport {HTTP_INTERCEPTORS} from \"@angular/common/http\";\r\nimport {GnxApplyTokenInterceptor} from \"./interceptors/gnx-apply-token-interceptor\";\r\nimport {GnxRefreshTokenInterceptor} from \"./interceptors/gnx-refresh-token-interceptor\";\r\nimport {GnxAuthService} from \"./gnx-auth.service\";\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    GnxAuthComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n  ],\r\n  exports: [\r\n    GnxAuthComponent\r\n  ],\r\n  providers: [\r\n    CookieService,\r\n    {provide: HTTP_INTERCEPTORS, useClass: GnxApplyTokenInterceptor, multi: true},\r\n    {provide: HTTP_INTERCEPTORS, useClass: GnxRefreshTokenInterceptor, multi: true},\r\n  ]\r\n})\r\nexport class GnxAuthModule {\r\n\r\n  public static forRoot(environment: any, translatorService: any): ModuleWithProviders {\r\n\r\n    return {\r\n      ngModule: GnxAuthModule,\r\n      providers: [\r\n        GnxAuthService,\r\n        {provide: 'TranslatorService', useClass: translatorService},\r\n        {\r\n          provide: 'env',\r\n          useValue: environment\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n"],"names":["JwtHelperService","ReplaySubject","HttpHeaders","switchMap","of","tap","map","catchError","Injectable","HttpClient","CookieService","Router","ActivatedRoute","Inject","Component","Input","first","HttpErrorResponse","throwError","NgModule","BrowserModule","HTTP_INTERCEPTORS"],"mappings":"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"}
